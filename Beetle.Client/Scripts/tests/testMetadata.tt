<#@ template language="C#" hostSpecific="true" debug="true" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".js"#>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Diagnostics" #>
<#@ assembly name="$(ProjectDir)\bin\Newtonsoft.Json.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Beetle.Server.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Beetle.Server.EntityFramework.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Beetle.Client.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#
const string inputFile = @"..\..\Models\TestModel.edmx";
MetadataLoader loader = new MetadataLoader(this);
MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded = loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
var connectionString = "metadata=res://*/Models.TestModel.csdl|res://*/Models.TestModel.ssdl|res://*/Models.TestModel.msl;provider=System.Data.SqlServerCe.4.0;provider connection string=&quot;data source=|DataDirectory|\\Test.sdf&quot;";
var assembly = System.AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == "Beetle.Client");
var metadata = Beetle.Server.EntityFramework.MetadataGenerator.Generate(metadataWorkspace, assembly, connectionString).ToMinified();
var settings = new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore, TypeNameHandling = TypeNameHandling.None };
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

var testMetadata = <#= JsonConvert.SerializeObject(metadata, Newtonsoft.Json.Formatting.Indented, settings) #>;
<#+

private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
    new Lazy<System.Resources.ResourceManager>(
        () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), isThreadSafe: true);

public static string GetResourceString(string resourceName)
{
    return ResourceManager.Value.GetString(resourceName, null);
}

#>
