<#@ template language="C#" hostSpecific="true" debug="true" #>
<#@ output extension=".js"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="$(ProjectDir)\bin\EntityFramework.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Newtonsoft.Json.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Beetle.Server.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Beetle.Server.EntityFramework.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Beetle.Client.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#
var assembly = System.AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == "Beetle.Client");
var metadata = Beetle.Server.EntityFramework.MetadataGenerator.Generate(assembly, "Models.TestModel").ToMinified();
var settings = new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore, TypeNameHandling = TypeNameHandling.None };
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

var testMetadata = <#= JsonConvert.SerializeObject(metadata, Newtonsoft.Json.Formatting.Indented, settings) #>;
<#+

private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
    new Lazy<System.Resources.ResourceManager>(
        () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), isThreadSafe: true);

public static string GetResourceString(string resourceName)
{
    return ResourceManager.Value.GetString(resourceName, null);
}

#>
